#!/usr/bin/env python


import sys
import os

origdir = os.path.abspath(sys.argv[0] + '/../../home')
dstdir = os.path.expanduser('~')

import subprocess
def shell(cmd):
    p = subprocess.Popen(cmd.split(), stdout=subprocess.PIPE, stderr=subprocess.PIPE)
    (stdout, stderr) = p.communicate()
    if p.returncode:
        raise OSError(p.returncode, stderr)
    return stdout.decode('utf-8').strip().split('\n')

dirlinks = [path.replace('/.link', '') for path in shell('find %s -type f -name .link' % origdir)]
def dirlinked(path):
    for dirlink in dirlinks:
        if path == dirlink or path.startswith(dirlink + '/'):
            return True
    return False

dirnew = [dir for dir in shell('find %s -type d' % origdir) if not dirlinked(dir)]
filelinks = [file for file in shell('find %s -type f -or -type l' % origdir) if not dirlinked(file)]

def dstpath(path):
    return path.replace(origdir, dstdir)

def rm_files(paths):
    if paths:
        for path in paths:
            print(path)

        try:
            raw_input('About to delete the above: ')
        except NameError:
            input('About to delete the above: ')

        for path in paths:
            if os.path.islink(path):
                os.unlink(path)
            elif os.path.isfile(path):
                os.remove(path)
            elif os.path.isdir(path):
                os.rmdir(path)
            else:
                raise OSError(path)

if len(sys.argv) > 1 and sys.argv[1] == 'clean':
    rm_files([dstpath(origpath) for origpath in dirlinks + filelinks if os.path.lexists(dstpath(origpath))])
else:
    torm = []
    for origpath in dirnew:
        if os.path.exists(dstpath(origpath)) and not os.path.isdir(dstpath(origpath)):
            torm.append(dstpath(origpath))
    for origpath in dirlinks + filelinks:
        if os.path.exists(dstpath(origpath)) and not os.path.islink(dstpath(origpath)):
            torm.append(dstpath(origpath))

    rm_files(torm)

    for origpath in dirnew:
        if not os.path.exists(dstpath(origpath)):
            os.mkdir(dstpath(origpath))

    for origpath in dirlinks + filelinks:
        if not os.path.exists(dstpath(origpath)):
            os.symlink(origpath, dstpath(origpath))
