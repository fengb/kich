#!/bin/bash
#http://stackoverflow.com/questions/5014823/how-to-profile-a-bash-shell-script-slow-startup
#PS4='+ \t\011 '
#exec 3>&2 2>trace.log
#set -x

function init {
  set -euo pipefail

  : ${KICH_SRC="`cd $HOME/.kich && pwd -P`"}
  : ${KICH_TGT="$HOME"}
  : ${KICH_IGNORE="`cat "$KICH_SRC/.kichignore" 2>/dev/null; echo .kichignore`"}

  IFS=$'\n'
}

function to_tgt {
  sed -e "s;^$KICH_SRC;$KICH_TGT;" -e "s/.link$//"
}

function or_names {
  __=$'\\\n'
  sed -e '/^ *$/d' -e '1!'"s/^/-or$__-name$__/" -e "1s/^/-name$__/"
}

function src_find {
  src_find_exclude="`or_names <<< "$KICH_IGNORE"`"

  find "$KICH_SRC" \( $src_find_exclude \) -prune -or \( "$@" \) -print
}

function tgt_dirs {
  src_find -not \( -name '*.link' -prune \) -type d | to_tgt
}

function tgt_links {
  src_find -name '*.link' -prune -or -type f | to_tgt
}

function abspath {
  [ ! -e "$1" ] && error "'$1' does not exist"
  echo "$(cd "$(dirname "$1")" && pwd)/$(basename "$1")"
}

function find_filter {
  find "$@" -maxdepth 0 2>/dev/null || true
}

function src_from {
  [[ "$1" != "$KICH_TGT"* ]] && error "'$1' not in \$KICH_TGT ($KICH_TGT)"
  [[ "$1" == "$KICH_SRC"* ]] && error "'$1' already synced"

  src="${KICH_SRC}${1#"$KICH_TGT"}"
  if [ -f "$1" ]; then
    echo "$src"
  elif [ -d "$1" ]; then
    echo "$src.link"
  elif [ -e "$src" ]; then
    echo "$src"
  else
    echo "$src.link"
  fi
}

function rm_files {
  files="`<&3 grep -v '^$' | sort -u`"
  [ -z "$files" ] && return

  echo "$files"
  read -p "About to delete [enter to continue]: "
  echo

  rm -rf $files
}

function error {
  echo "kich: $1" >&2
  exit 1
}

function install {
  : ${tgt_dirs=`tgt_dirs`}
  : ${tgt_links=`tgt_links`}

  existdirs="`find_filter $tgt_dirs -not -type d`"
  existlinks="`find_filter $tgt_links -not -type l`"
  brokelinks="`find_filter -L $tgt_links -type l`"

  NL=$'\n'
  rm_files 3<<< "$existdirs$NL$existlinks$NL$brokelinks"

  for dst in $tgt_dirs; do
    # Existence check speeds things up...
    [ ! -e "$dst" ] && mkdir -p "$dst"
  done

  for dst in $tgt_links; do
    if [ ! -e "$dst" ]; then
      echo "â‡‹  $dst"
      ln -s "`src_from "$dst"`" "$dst"
    fi
  done
}

function sync {
  [ ! -e "$1" ] && error "'$1' is not found"
  [ -L "$1" ] && error "'$1' is a symlink"

  src="$(src_from "`abspath "$1"`")"
  mkdir -p "${src%/*}"
  mv "$1" "$src"
  ln -s "$src" "$1"
}

function unsync {
  [ ! -L "$1" ] && error "'$1' is not a symlink"

  src="$(readlink "`abspath "$1"`")"
  [[ "$src" != "$KICH_SRC"* ]] && error "'$1' is not synced"
  [ ! -e "$src" ] && error "'$src' is not found"

  rm "$1"
  mv "$src" "$1"
}

function uninstall {
  : ${tgt_links=`tgt_links`}
  rm_files 3<<< "$tgt_links"
}

function env {
  echo "KICH_SRC='$KICH_SRC'"
  echo "KICH_TGT='$KICH_TGT'"
  echo "KICH_IGNORE='$KICH_IGNORE'"
}

function ls {
  : ${tgt_links=`tgt_links`}
  find_filter -L $tgt_links -not -type l
}

function clean {
  kichlinks="`find "$KICH_TGT" -type l -lname "$KICH_SRC*"`"
  brokelinks="`find_filter -L $kichlinks -type l`"
  rm_files 3<<< "$brokelinks"
}

if [ "${BASH_SOURCE[0]}" = "${0}" ]; then
  init

  case "${1-}" in
    install|sync|unsync|uninstall|env|ls|clean)
      command="$1"
      shift
      "$command" "$@"
      ;;
    "")
      install
      ;;
    *)
      error "'$1' is not a command"
      ;;
  esac
fi
