#!/usr/bin/env perl

use strict;
use warnings;
use File::Basename;
use File::Copy qw[move];
use File::Path qw[make_path];
use File::Spec;
use Getopt::Long;

use constant FILE_SEP => ";";

# https://stackoverflow.com/a/6829502
sub source {
  my $name = shift;
  open my $file, "<", $name
    or die "Config file '$name' not found\nDied";

  while (<$file>) {
    chomp;
    my ($k, $v) = split /=/, $_, 2;
    $v =~ s/^(['"])(.*)\1/$2/; #' fix highlighter
    $v =~ s/\$([a-zA-Z]\w*)/$ENV{$1}/g;
    $v =~ s/`(.*?)`/`$1`/ge; #dangerous
    $ENV{$k} = $v;
  }

  close $file;
}

sub starts_with {
  my $haystack = shift;
  my $needle = shift;
  return index($haystack, $needle) == 0;
}

sub uniq {
  my %seen;
  grep {!$seen{$_}++} @_;
}

sub init_env {
  GetOptions(
    "config=s" => \$ENV{KICH_CONFIG}
  ) or die;

  length($ENV{KICH_CONFIG} // '') and source($ENV{KICH_CONFIG});
  !length($ENV{KICH_SRC} // '') and source("$ENV{HOME}/.kichconfig");

  $ENV{KICH_TGT} ||= $ENV{HOME};
  $ENV{KICH_IGNORE} ||= '';
}

sub find_or_names {
  my @merged = map {("-name", $_, "-o")} @_;
  pop @merged;
  return @merged;
}

sub find {
  open(my $pipe, '-|', "find", @_);
  my @files = <$pipe>;
  close($pipe);
  chomp(@files);
  return @files;
}

sub src_find {
  if (!$ENV{KICH_IGNORE}) {
    return find($ENV{KICH_SRC}, @_);
  }

  my @ignore = split FILE_SEP, $ENV{KICH_IGNORE};
  return find($ENV{KICH_SRC},
    "(", find_or_names(@ignore), ")", "-prune",
    "-o",
    "(", @_, ")", "-print"
  );
}

# Removes paths that are prefixes of the next path:
# Example:
#     Library/CoreData
#     Library/CoreData/ExternalRecords
#     Library/CoreData/ExternalRecords/HTMLNotes
#   becomes
#     Library/CoreData/ExternalRecords/HTMLNotes
sub remove_prefix_paths {
  #sed '$!N; /\(.*\)\n\1\/.*/!P;D'
}

sub src_dirs {
  return src_find(qw[! ( -name *.link -prune ) -type d]);
}

sub src_links {
  return src_find(qw[-name *.link -prune -o -type f])
}

sub tgt_from {
  my $name = shift;

  starts_with($name, $ENV{KICH_SRC}) or die "'$name' not in \$KICH_SRC ($ENV{KICH_SRC})\nDied";

  $name =~ s!^\Q$ENV{KICH_SRC}\E!$ENV{KICH_TGT}!;
  $name =~ s!.link$!!;
  return $name;
}

sub src_from {
  my $tgt = shift;

  starts_with($tgt, $ENV{KICH_TGT}) or die "'$tgt' not in \$KICH_TGT ($ENV{KICH_TGT})\nDied";

  if ((-l $tgt) and !broke($tgt)) {
    return readlink($tgt);
  }

  my $src = $tgt =~ s!^\Q$ENV{KICH_TGT}\E!$ENV{KICH_SRC}!r;

  if (-f $tgt or -f $src) {
    return $src;
  } elsif (-d $tgt or -d "$src.link") {
    return "$src.link";
  } else {
    die "Neither SRC ($src) nor TGT ($tgt) cannot be identified\nDied";
  }
}

sub rm_files {
  (scalar(@_) == 0) and return;

  my @files = @_;

  foreach my $file(@files) {
    print "✗  $file\n";
  }

  print "About to delete. Proceed [y/N]? ";
  my $yn = <STDIN>;
  chomp($yn);
  if (!starts_with($yn, "y")) {
    return;
  }

  unlink(@files);
}

sub broke {
  my $name = shift;
  return lstat $name && !stat $name;
}

my %commands = (
  install => sub {
    my @tgt_dirs = map {tgt_from $_} src_dirs;
    my @tgt_links = map {tgt_from $_} src_links;

    my @existdirs = grep {-e $_ and !-d $_} @tgt_dirs;
    my @existlinks = grep {-e $_ and !-l $_} @tgt_links;
    my @brokelinks = grep {-l $_ and broke $_} @tgt_links;

    rm_files(@existdirs, @existlinks, @brokelinks);

    make_path(@tgt_dirs);

    foreach my $dst(@tgt_links) {
      if (!-e $dst) {
        print "⇋  $dst\n";
        symlink src_from($dst), $dst;
      }
    }
  },

  sync => sub {
    my $tgt = shift;

    (-e $tgt) or die "'$tgt' is not found\nDied";
    (!-l $tgt) or die "'$tgt' is a symlink\nDied";

    my $src = src_from(File::Spec->rel2abs($tgt));
    make_path(dirname($src));
    move($tgt, $src);
    symlink $src, $tgt;
  },

  unsync => sub {
    my $tgt = shift;

    (-l $tgt) or die "'$tgt' is not a symlink\nDied";

    my $src = readlink "$tgt";

    (-e $src) or die "'$src' is not found\nDied";
    starts_with($src, $ENV{KICH_SRC}) or die "'$tgt' is not synced\nDied";

    unlink "$tgt";
    move("$src", "$tgt");
  },

  uninstall => sub {
    my @tgt_links = map {tgt_from($_)} src_links;
    rm_files(grep {-l $_} @tgt_links);
  },

  env => sub {
    print "KICH_SRC='$ENV{KICH_SRC}'\n";
    print "KICH_TGT='$ENV{KICH_TGT}'\n";
    print "KICH_IGNORE='$ENV{KICH_IGNORE}'\n";
  },

  ls => sub {
    my @tgt_links = map {tgt_from $_} src_links;
    for my $link(grep {!broke $_} @tgt_links) {
      print "$link\n";
    }
  },

  clean => sub {
    my @kich_links = find($ENV{KICH_TGT}, qw[-type l -lname], $ENV{KICH_SRC});
    rm_files(grep {broke $_} @kich_links);
  }
);

sub command {
  my $name = shift || "install";
  if ($commands{$name}) {
    $commands{$name}->(@_);
  } else {
    die "'$1' is not a command\nDied";
  }
}

unless (caller) {
  init_env();
  command(@ARGV);
}
