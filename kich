#!/bin/bash
#http://stackoverflow.com/questions/5014823/how-to-profile-a-bash-shell-script-slow-startup
#PS4='+ \t\011 '
#exec 3>&2 2>trace.log
#set -x

set -euo pipefail

: ${KICH_SRC="$(git -C "`dirname "${BASH_SOURCE[0]}"`" rev-parse --show-toplevel)"}
: ${KICH_TGT="$HOME"}
: ${KICH_EXCLUDE='.keep .DS_Store .git LICENSE'}

to_tgt() {
  sed -e "s;^$KICH_SRC;$KICH_TGT;" -e "s/.link$//"
}

or_names() {
  sed -e 's/\([^ ]*\)/-or -name \1/g' -e 's/^-or //'
}

src_find() {
  : ${src_find_exclude="`or_names <<< "$KICH_EXCLUDE"`"}
  find "$KICH_SRC" -mindepth 1 -not \( \( $src_find_exclude \) -prune \) \( "$@" \)
}

tgt_dirs() {
  src_find -not \( -path '*.link' -prune \) -type d | to_tgt
}

tgt_links() {
  src_find \( -path '*.link' -prune \) -or -type f | to_tgt
}

abspath() {
  [ ! -e "$1" ] && error "'$1' does not exist"
  echo "$(cd "$(dirname "$1")" && pwd)/$(basename "$1")"
}

print0() {
  tr $'\r\n' "\0\0"
}

find_filter() {
  files="`cat`"
  [ -z "$files" ] && return

  if [ "$1" = "-L" ]; then
    mod="$1"
    shift
  fi

  print0 <<< "$files" | xargs -0 -I {} find ${mod-} {} -maxdepth 0 "$@" 2>/dev/null || true
}

src_from() {
  [[ "$1" != "$KICH_TGT"* ]] && error "'$1' not in \$KICH_TGT ($KICH_TGT)"
  [[ "$1" == "$KICH_SRC"* ]] && error "'$1' already synced"

  src="${KICH_SRC}${1#"$KICH_TGT"}"
  if [ -f "$1" ]; then
    echo "$src"
  elif [ -d "$1" ]; then
    echo "$src.link"
  elif [ -e "$src" ]; then
    echo "$src"
  else
    echo "$src.link"
  fi
}

concat() {
  for arg in "$@"; do
    [ -n "$arg" ] && echo "$arg"
  done
  true
}

rm_files() {
  files="`concat "$@" | sort -u`"
  [ -z "$files" ] && return
  echo "$files"
  read -p "About to delete [enter to continue]: "
  echo

  print0 <<< "$files" | xargs -0 rm -rf
}

error() {
  echo "kich: $1" >&2
  exit 1
}

install() {
  # Can't assign ${:=} in herestring <<<
  : ${tgt_dirs=`tgt_dirs`}
  : ${tgt_links=`tgt_links`}

  existdirs="`find_filter -not -type d <<< "$tgt_dirs"`"
  existlinks="`find_filter -not -type l <<< "$tgt_links"`"
  brokelinks="`find_filter -L -type l <<< "$tgt_links"`"

  rm_files "$existdirs" "$existlinks" "$brokelinks"

  while read -r dst; do
    # Existence check speeds things up...
    [ ! -e "$dst" ] && mkdir -p "$dst"
  done <<< "$tgt_dirs"

  while read -r dst; do
    if [ ! -e "$dst" ]; then
      echo "â‡‹  $dst"
      ln -s "`src_from "$dst"`" "$dst"
    fi
  done <<< "$tgt_links"
}

sync() {
  [ ! -e "$1" ] && error "'$1' is not found"
  [ -L "$1" ] && error "'$1' is a symlink"

  src="$(src_from "`abspath "$1"`")"
  mkdir -p "${src%/*}"
  mv "$1" "$src"
  ln -s "$src" "$1"
}

unsync() {
  [ ! -L "$1" ] && error "'$1' is not a symlink"

  src="$(readlink "`abspath "$1"`")"
  [[ "$src" != "$KICH_SRC"* ]] && error "'$1' is not synced"
  [ ! -e "$src" ] && error "'$src' is not found"

  rm "$1"
  mv "$src" "$1"
}

uninstall() {
  rm_files "${tgt_links=`tgt_links`}"
}

env() {
  echo "KICH_SRC='$KICH_SRC'"
  echo "KICH_TGT='$KICH_TGT'"
  echo "KICH_EXCLUDE=\$'$KICH_EXCLUDE'"
}

ls() {
  echo "${tgt_links=`tgt_links`}"
}

clean() {
  brokelinks="`find "$KICH_TGT" -lname "$KICH_SRC*" | find_filter -L -type l`"
  rm_files "$brokelinks"
}

case "${1-}" in
  install|sync|unsync|uninstall|env|ls|clean)
    command="$1"
    shift
    "$command" "$@"
    ;;
  "")
    install
    ;;
  *)
    error "'$1' is not a command"
    ;;
esac
