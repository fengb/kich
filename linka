#!/bin/bash
#http://stackoverflow.com/questions/5014823/how-to-profile-a-bash-shell-script-slow-startup
#PS4='+ \t\011 '
#exec 3>&2 2>trace.log
#set -x

set -euo pipefail

base="$(git -C "`dirname "${BASH_SOURCE[0]}"`" rev-parse --show-toplevel)"
LINKA="$base/home"

abspath() {
  [ ! -e "$1" ] && exit_message "'$1' does not exist"
  echo "$(cd "$(dirname "$1")" && pwd)/$(basename "$1")"
}

print0() {
  tr $'\r\n' "\0\0"
}

find_filter() {
  files="`cat`"
  [ -z "$files" ] && return

  if [ "$1" = "-L" ]; then
    mod="$1"
    shift
  fi

  print0 <<< "$files" | xargs -0 -J {} find ${mod-} {} -maxdepth 0 "$@" 2>/dev/null || true
}

to_home() {
  sed -e "s;^$LINKA;$HOME;" -e "s/.link$//"
}

as_sync() {
  [[ "$1" != "$HOME"* ]] && exit_message "'$1' not in \$HOME"
  [[ "$1" == "$LINKA"* ]] && exit_message "'$1' already synced"

  sync="${LINKA}${1#$HOME}"
  if [ -f "$1" ]; then
    echo "$sync"
  elif [ -d "$1" ]; then
    echo "$sync.link"
  elif [ -e "$sync" ]; then
    echo "$sync"
  else
    echo "$sync.link"
  fi
}

concat() {
  for arg in "$@"; do
    [ -n "$arg" ] && echo "$arg"
  done
  true
}

rm_files() {
  files="`concat "$@" | sort -u`"
  [ -z "$files" ] && return
  echo "$files"
  read -p "About to delete [enter to continue]: "
  echo

  print0 <<< "$files" | xargs -0 rm -rf
}

run_log() {
  sed -e "s;$LINKA;\$LINKA;" -e "s;$HOME;\$HOME;" <<< "$@"
  "$@"
}

git_historic_files() {
  if [ -n "${1-}" ]; then
    arg="--max-count=$1"
  fi

  git -C "$base" log --pretty=format: --name-only ${arg-} | sed -e '/^ *$/d' -e "s;^;$base/;" | sort -u
}

#find -L "$HOME" -not \( -not -path "$HOME" -prune \) -type l

exit_message() {
  echo "$1" >&2
}

[[ "${BASH_SOURCE[0]}" != "${0}" ]] && return

exit_message() {
  echo "$1" >&2
  exit 1
}

install() {
  dirnew="`find "$LINKA" -not \( -path '*.link' -prune \) -type d | to_home`"
  links="`find "$LINKA" \( -type d -name '*.link' -prune \) -or -type f -not -name ".keep" | to_home`"

  existdirs="`find_filter -not -type d <<< "$dirnew"`"
  existlinks="`find_filter -not -type l <<< "$links"`"
  brokelinks="`git_historic_files | to_home | find_filter -L -type l`"

  rm_files "$existdirs" "$existlinks" "$brokelinks"

  while read -r dst; do
    [ ! -e "$dst" ] && mkdir -p "$dst"
  done <<< "$dirnew"

  while read -r dst; do
    [ ! -e "$dst" ] && ln -s "`as_sync "$dst"`" "$dst"
  done <<< "$links"
}

sync() {
  file="`abspath $1`"
  [ -L "$file" ] && exit_message "'$1' is a symlink"

  sync="`as_sync "$file"`"
  mkdir -p "${sync%/*}"
  run_log mv "$file" "$sync"
  run_log ln -s "$sync" "$file"
}

unsync() {
  file="`abspath $1`"
  [ ! -L "$file" ] && exit_message "'$1' is not a symlink"
  sync="`readlink "$file"`"
  [[ "$sync" != "$LINKA"* ]] && exit_message "'$1' is not synced"
  [ ! -e "$sync" ] && exit_message "'$sync' is not found"
  rm "$1"
  run_log mv "$sync" "$1"
}

case "${1-}" in
  install|sync|unsync)
    command="$1"
    shift
    "$command" "$@"
    ;;
  pwd)
    echo "$base"
    ;;
  "")
    install
    ;;
  *)
    exit_message "Command '$1' not found"
    ;;
esac
