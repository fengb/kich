#!/bin/bash
#http://stackoverflow.com/questions/5014823/how-to-profile-a-bash-shell-script-slow-startup
#PS4='+ \t\011 '
#exec 3>&2 2>trace.log
#set -x

function abspath {
  echo "$(cd "$(dirname "$1")" && pwd)/$(basename "$1")"
}

function init_env {
  [ -n "${KICH_CONFIG-}" ] && source "$KICH_CONFIG"

  [ -z "${KICH_SRC-}" ] && source "$HOME/.kichconfig"
  : ${KICH_TGT="$HOME"}
  : ${KICH_CACHE="${XDG_CACHE_HOME:-$HOME/.cache}/kich"}
  : ${KICH_IGNORE=''}

  IFS=$'\n'
}

function to_tgt {
  sed -e "s;^$KICH_SRC;$KICH_TGT;" -e "s/.link$//"
}

function or_names {
  __=$'\\\n'
  sed -e '/^ *$/d' -e 's/^  *//' -e "s/^/-or${__}-name${__}/" | sed -e '1d'
}

function src_find {
  if [ -z "$KICH_IGNORE" ]; then
    find "$KICH_SRC" "$@"
  else
    src_find_exclude="`or_names <<< "$KICH_IGNORE"`"
    find "$KICH_SRC" \( $src_find_exclude \) -prune -or \( "$@" \) -print
  fi
}

# Removes paths that are prefixes of the next path:
# Example:
#     Library/CoreData
#     Library/CoreData/ExternalRecords
#     Library/CoreData/ExternalRecords/HTMLNotes
#   becomes
#     Library/CoreData/ExternalRecords/HTMLNotes
function remove_prefix_paths {
  __=$'\\\n'
  sed '$!N; /\(.*\)\n\1\/.*/!P;D'
}

function src_dirs {
  src_find -not \( -name '*.link' -prune \) -type d | remove_prefix_paths
}

function src_links {
  src_find -name '*.link' -prune -or -type f
}

function find_filter {
  find "$@" -maxdepth 0 2>/dev/null || true
}

function tgt_from {
  [[ "$1" != "$KICH_SRC"* ]] && panic "'$1' not in \$KICH_SRC ($KICH_SRC)"

  tgt="${KICH_TGT}${1#"$KICH_SRC"}"
  echo "${tgt%.link}"
}

function src_from {
  [[ "$1" != "$KICH_TGT"* ]] && panic "'$1' not in \$KICH_TGT ($KICH_TGT)"
  [[ "$1" == "$KICH_SRC"* ]] && panic "'$1' already synced"

  src="${KICH_SRC}${1#"$KICH_TGT"}"
  if [ -f "$1" ]; then
    echo "$src"
  elif [ -d "$1" ]; then
    echo "$src.link"
  elif [ -e "$src" ]; then
    echo "$src"
  else
    echo "$src.link"
  fi
}

function rm_files {
  files="`<<<"$*" sed -e '/^$/d' | sort -u`"
  [ -z "$files" ] && return

  sed 's/^/✗  /' <<<"$files"
  read -p "About to delete. Proceed [y/N]? " yn
  case "$yn" in
    [Yy]*)
      rm -rf $files
      ;;
  esac
}

function panic {
  echo "kich: $1" >&2
  exit 1
}

function run_install {
  tgt_dirs="`src_dirs | to_tgt`"
  tgt_links="`src_links | to_tgt | sort`"

  non_dirs="`find_filter $tgt_dirs -not -type d`"
  non_links="`find_filter $tgt_links -not -type l`"
  bad_links="`find_filter -L $tgt_links -type l`"

  if [ -f "$KICH_CACHE" ]; then
    stale_links="`comm -23 "$KICH_CACHE" <(echo "$tgt_links")`"
  fi

  rm_files $non_dirs $non_links $bad_links ${stale_links-}

  mkdir -p $tgt_dirs

  for tgt in $tgt_links; do
    if [ ! -e "$tgt" ]; then
      echo "⇋  $tgt"
      ln -s "`src_from "$tgt"`" "$tgt"
    fi
  done

  mkdir -p "$(dirname "$KICH_CACHE")"
  echo "$tgt_links" >"$KICH_CACHE"
}

function run_sync {
  tgt=${1-}
  [ ! -e "$tgt" ] && panic "'$tgt' is not found"
  [ -L "$tgt" ] && panic "'$tgt' is a symlink"

  src="$(src_from "`abspath "$tgt"`")"
  mkdir -p "${src%/*}"
  mv "$tgt" "$src"
  ln -s "$src" "$tgt"
}

function run_unsync {
  [ ! -L "$1" ] && panic "'$1' is not a symlink"

  src="$(readlink "$1")"
  [[ "$src" != "$KICH_SRC"* ]] && panic "'$1' is not synced"
  [ ! -e "$src" ] && panic "'$src' is not found"

  rm "$1"
  mv "$src" "$1"
}

function run_uninstall {
  tgt_links="`src_links | to_tgt`"
  rm_files $tgt_links
}

function run_env {
  echo "KICH_SRC='$KICH_SRC'"
  echo "KICH_TGT='$KICH_TGT'"
  echo "KICH_CACHE='$KICH_CACHE'"
  echo "KICH_IGNORE='$KICH_IGNORE'"
}

function run_ls {
  tgt_links="`src_links | to_tgt`"
  find_filter -L $tgt_links -not -type l
}

function run_clean {
  kichlinks="`find "$KICH_TGT" -type l -lname "$KICH_SRC*"`"
  brokelinks="`find_filter -L $kichlinks -type l`"
  rm_files $brokelinks
}

function run {
  set -euo pipefail

  init_env

  case "${1-}" in
    install|sync|unsync|uninstall|env|ls|clean)
      command="run_$1"
      shift
      "$command" "$@"
      ;;
    "")
      run_install
      ;;
    *)
      panic "'$1' is not a command"
      ;;
  esac
}

if [ "${BASH_SOURCE[0]}" = "$0" ]; then
  while getopts ":c:" o; do
    case "$o" in
      c*)
        [ ! -e "$OPTARG" ] && panic "config file '$OPTARG' not found"
        KICH_CONFIG="$OPTARG"
        ;;
      \?)
        panic "'-$OPTARG' not recognized"
        ;;
      :)
        panic "'-$OPTARG' requires an argument"
        ;;
    esac
  done
  shift "$((OPTIND-1))"

  run "$@"
fi
